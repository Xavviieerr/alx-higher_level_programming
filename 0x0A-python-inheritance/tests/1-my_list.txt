#!/usr/bin/python3
"""Unittest for MyList class"""

import unittest
from io import StringIO
import sys
MyList = __import__('1-my_list').MyList  # Assuming the class is in my_list.py

class TestMyList(unittest.TestCase):

    def test_inheritance(self):
        """Test that MyList is a subclass of list"""
        self.assertTrue(issubclass(MyList, list))

    def test_print_sorted_output(self):
        """Test that print_sorted prints the list sorted"""
        my_list = MyList([4, 2, 1, 3])
        captured_output = StringIO()
        sys.stdout = captured_output  # Redirect stdout
        my_list.print_sorted()
        sys.stdout = sys.__stdout__  # Reset redirect
        self.assertEqual(captured_output.getvalue().strip(), "[1, 2, 3, 4]")

    def test_original_list_unchanged(self):
        """Ensure the original list is not changed"""
        my_list = MyList([5, 3, 1])
        my_list.print_sorted()
        self.assertEqual(my_list, [5, 3, 1])

    def test_empty_list(self):
        """Test print_sorted with an empty list"""
        my_list = MyList()
        captured_output = StringIO()
        sys.stdout = captured_output
        my_list.print_sorted()
        sys.stdout = sys.__stdout__
        self.assertEqual(captured_output.getvalue().strip(), "[]")

    def test_negative_numbers(self):
        """Test sorting with negative numbers"""
        my_list = MyList([-1, -3, 2, 0])
        captured_output = StringIO()
        sys.stdout = captured_output
        my_list.print_sorted()
        sys.stdout = sys.__stdout__
        self.assertEqual(captured_output.getvalue().strip(), "[-3, -1, 0, 2]")

if __name__ == '__main__':
    unittest.main()

